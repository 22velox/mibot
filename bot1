from config import *
import telebot
from telebot import types
import requests
from json.decoder import JSONDecodeError

# Inicializar el bot de Telegram con el token
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# URLs de la API
PILOTS_API_URL = "http://ergast.com/api/f1/2024/drivers.json"
SESSIONS_API_URL = "https://ergast.com/api/f1/2024.json"
CONSTRUCTORS_API_URL = "http://ergast.com/api/f1/2024/constructors.json"

# Diccionario para almacenar el último mensaje por chat
last_messages = {}

# Función para eliminar el último mensaje enviado a un chat
def delete_last_message(chat_id):
    if chat_id in last_messages:
        try:
            bot.delete_message(chat_id, last_messages[chat_id])
        except Exception as e:
            print(f"Error al borrar mensaje anterior: {e}")

# Función para mostrar el estado "escribiendo" en el chat
def send_typing_action(chat_id):
    bot.send_chat_action(chat_id, 'typing')

# Función para obtener datos JSON desde una URL
def get_json_data(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except JSONDecodeError as e:
        raise ValueError(f"Error en el formato JSON: {e}")
    except requests.exceptions.RequestException as e:
        raise ConnectionError(f"Error de conexión o en la solicitud: {e}")

# Función que maneja la bienvenida al bot
@bot.message_handler(commands=['start'])
def send_welcome(message):
    delete_last_message(message.chat.id)

    # Crear el teclado con botones
    markup = types.InlineKeyboardMarkup()
    pilots_button = types.InlineKeyboardButton("Pilotos", callback_data="pilotos")
    sessions_button = types.InlineKeyboardButton("Sesiones 2024", callback_data="sesiones2024")
    constructors_button = types.InlineKeyboardButton("Constructores", callback_data="constructores")

    markup.add(pilots_button, constructors_button)
    markup.add(sessions_button)

    # Enviar el mensaje de bienvenida con los botones
    send_typing_action(message.chat.id)
    sent_message = bot.send_message(
        message.chat.id, 
        "¡Bienvenido! Aquí abajo tienes varios botones para consultar lo que necesites saber:", 
        reply_markup=markup
    )

    last_messages[message.chat.id] = sent_message.message_id

# Función para manejar los botones del teclado
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    handlers = {
        "pilotos": handle_pilots_command,
        "sesiones2024": handle_sessions_command,
        "constructores": handle_constructors_command
    }
    handler = handlers.get(call.data)
    if handler:
        handler(call.message)

# Función para manejar el comando de pilotos
@bot.message_handler(commands=['pilotos'])
def handle_pilots_command(message):
    delete_last_message(message.chat.id)
    send_typing_action(message.chat.id)
    
    try:
        data = get_json_data(PILOTS_API_URL)
        drivers_data = data['MRData']['DriverTable']['Drivers']
        
        if not drivers_data:
            send_error_message(message.chat.id, "No hay pilotos disponibles para la temporada actual.")
            return
        
        pilots_list = format_pilots_data(drivers_data)
        send_message_with_tracking(message.chat.id, pilots_list)
    
    except (ValueError, ConnectionError) as e:
        send_error_message(message.chat.id, f"Error al obtener los datos de los pilotos: {e}")

# Función para manejar el comando de sesiones
@bot.message_handler(commands=['sesiones2024'])
def handle_sessions_command(message):
    delete_last_message(message.chat.id)
    send_typing_action(message.chat.id)
    
    try:
        data = get_json_data(SESSIONS_API_URL)
        sessions_data = data['MRData']['RaceTable']['Races']
        
        if not sessions_data:
            send_error_message(message.chat.id, "No hay sesiones disponibles.")
            return
        
        sessions_list = format_sessions_data(sessions_data)
        send_message_with_tracking(message.chat.id, sessions_list)
    
    except (ValueError, ConnectionError) as e:
        send_error_message(message.chat.id, f"Error al obtener los datos de las sesiones: {e}")

# Función para manejar el comando de constructores
@bot.message_handler(commands=['constructores'])
def handle_constructors_command(message):
    delete_last_message(message.chat.id)
    send_typing_action(message.chat.id)
    
    try:
        data = get_json_data(CONSTRUCTORS_API_URL)
        constructors_data = data['MRData']['ConstructorTable']['Constructors']
        
        if not constructors_data:
            send_error_message(message.chat.id, "No hay constructores disponibles.")
            return

        constructors_list = format_constructors_data(constructors_data)
        send_message_with_tracking(message.chat.id, constructors_list)
    
    except (ValueError, ConnectionError) as e:
        send_error_message(message.chat.id, f"Error al obtener los datos de los constructores: {e}")

# Funciones auxiliares para estructurar y enviar mensajes
def send_message_with_tracking(chat_id, text):
    sent_message = bot.send_message(chat_id, text)
    last_messages[chat_id] = sent_message.message_id

def send_error_message(chat_id, text):
    sent_message = bot.send_message(chat_id, text)
    last_messages[chat_id] = sent_message.message_id

# Funciones para formatear los datos recibidos de la API
def format_pilots_data(drivers_data):
    return "\n\n".join(
        f"Nombre: {driver['givenName']} {driver['familyName']}\n"
        f"Número: {driver.get('permanentNumber', 'N/A')}\n"
        f"Nacionalidad: {driver['nationality']}\n"
        f"Fecha de nacimiento: {driver['dateOfBirth']}"
        for driver in drivers_data
    )

def format_sessions_data(sessions_data):
    return "\n\n".join(
        f"Gran Premio: {session['raceName']}\n"
        f"Fecha: {session['date']}\n"
        f"Ubicación: {session['Circuit']['Location']['locality']}, {session['Circuit']['Location']['country']}"
        for session in sessions_data
    )

def format_constructors_data(constructors_data):
    return "\n\n".join(
        f"Nombre: {constructor['name']}\n"
        f"Nacionalidad: {constructor['nationality']}"
        for constructor in constructors_data
    )

if __name__ == '__main__':
    print('Bot on-line')
    bot.infinity_polling()